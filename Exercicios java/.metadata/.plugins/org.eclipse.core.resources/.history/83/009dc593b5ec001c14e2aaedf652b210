@Testcontainers
@DataMongoTest(excludeAutoConfiguration = EmbeddedMongoAutoConfiguration.class)
public class LivroRepositoryTest {

    @Container
    static MongoDBContainer mongoDBContainer = new MongoDBContainer("mongo");

    @Autowired
    private LivroRepository livroRepository;

    @AfterEach
    void cleanUp() {
        this.livroRepository.deleteAll();
    }

    Livro livroMock = new Livro("61ff1e243dabcd00b6452431", "livro1", "isbn1");
    @Test
    void DeveCadastrarNovoLivro() {
        this.livroRepository.insert(livroMock);


        Livro livro = livroRepository.insert(new Livro("1", "livro teste", "isbnteste"));

        Assertions.assertNotNull(livro );   }


    @Test
    void DeveListarTodosOsLivros() {
        this.livroRepository.findAll();


        List<Livro> livro = livroRepository.findAll();

        Assertions.assertNotNull(livro );   }



    @Test
    void DeveBuscarLivroPeloId() {
        this.livroRepository.findById(livroMock.getId());


        Optional<Livro> livro = livroRepository.findById("");

        Assertions.assertNotNull(livro );   }


    @Test
    void DeveAtualizarLivroPeloId() {
        this.livroRepository.findById(livroMock.getId());
        this.livroRepository.save(livroMock);


        Livro livro = livroRepository.save(livroMock);

        Assertions.assertNotNull(livro );   }



    @Test
    void DeveExcluirLivroPeloId() {
        this.livroRepository.deleteById(livroMock.getId());


        Optional<Livro> livro = livroRepository.findById("");

        Assertions.assertEquals(livro, Optional.empty() );   }

}